<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue 项目开发规范</title>
    <link href="/post/f6787be0/"/>
    <url>/post/f6787be0/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本规范基于历史实践而总结，作为 Vue 3 项目开发指导，请根据实际情况进行调整</p><h2 id="文件夹名"><a href="#文件夹名" class="headerlink" title="文件夹名"></a>文件夹名</h2><ol><li><p>文件夹一律使用 KebabCase</p><p>bad</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">helloWorld<br></code></pre></td></tr></table></figure><p>good</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">hello-world<br></code></pre></td></tr></table></figure></li><li><p>避免文件夹中只有一个文件的情况</p></li></ol><h2 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h2><ol><li>组件名称应至少由两个单词组成（根组件除外）</li><li>组件文件的命名应统一使用 PascalCase 或者 KebabCase</li><li>在 JS 或 JSX 中组件名应使用 PascalCase</li><li>组件名称在单文件组件或字符串模板中应使用 PascalCase；但是在 Dom 模板（Web component）中应使用 KebabCase</li></ol><h2 id="Props-名"><a href="#Props-名" class="headerlink" title="Props 名"></a>Props 名</h2><ol><li>定义 props 时使用 CamelCase</li><li>在单文件组件、JSX、Dom 模板中，使用 KebabCase</li></ol><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令缩写（<code>:</code> 表示 <code>v-bind:</code>，<code>@</code> 表示 <code>v-on:</code>，<code>#</code> 表示 <code>v-slot</code>）要么都使用，要么都不使用</p><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>单文件中应按照 <code>&lt;script&gt;</code>，<code>&lt;template&gt;</code>，<code>&lt;style&gt;</code> 的顺序</p><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><ol><li>变量名应使用 CamelCase</li><li>变量名称应简短、可读、有意义，禁止使用拼音和拼音首字母</li><li>变量优先使用完整单词，临时变量或布局作用域可以使用单词的通用缩写形式，例如 <code>ele</code>，<code>btn</code>，<code>obj</code>，<code>str</code>；简单循环中可以使用 <code>i</code>，<code>j</code>，<code>k</code> 作为循环变量</li></ol><h2 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h2><p>常量名应使用全大写加下划线分隔的形式</p><h2 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h2><ol><li>函数名应使用 CamelCase</li><li>函数应使用动词或动词 + 名称的形式</li><li>请求数据的方法以 <code>Data</code> 结尾</li></ol><h3 id="函数常用动词"><a href="#函数常用动词" class="headerlink" title="函数常用动词"></a>函数常用动词</h3><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs text">get 获取/set 设置,<br>add 增加/remove 删除<br>create 创建/destory 移除<br>start 启动/stop 停止<br>open 打开/close 关闭,<br>read 读取/write 写入<br>load 载入/save 保存,<br>create 创建/destroy 销毁<br>begin 开始/end 结束,<br>backup 备份/restore 恢复<br>import 导入/export 导出,<br>split 分割/merge 合并<br>inject 注入/extract 提取,<br>attach 附着/detach 脱离<br>bind 绑定/separate 分离,<br>view 查看/browse 浏览<br>edit 编辑/modify 修改,<br>select 选取/mark 标记<br>copy 复制/paste 粘贴,<br>undo 撤销/redo 重做<br>insert 插入/delete 移除,<br>add 加入/append 添加<br>clean 清理/clear 清除,<br>index 索引/sort 排序<br>find 查找/search 搜索,<br>increase 增加/decrease 减少<br>play 播放/pause 暂停,<br>launch 启动/run 运行<br>compile 编译/execute 执行,<br>debug 调试/trace 跟踪<br>observe 观察/listen 监听,<br>build 构建/publish 发布<br>input 输入/output 输出,<br>encode 编码/decode 解码<br>encrypt 加密/decrypt 解密,<br>compress 压缩/decompress 解压缩<br>pack 打包/unpack 解包,<br>parse 解析/emit 生成<br>connect 连接/disconnect 断开,<br>send 发送/receive 接收<br>download 下载/upload 上传,<br>refresh 刷新/synchronize 同步<br>update 更新/revert 复原,<br>lock 锁定/unlock 解锁<br>check out 签出/check in 签入,<br>submit 提交/commit 交付<br>push 推/pull 拉,<br>expand 展开/collapse 折叠<br>begin 起始/end 结束,<br>start 开始/finish 完成<br>enter 进入/exit 退出,<br>abort 放弃/quit 离开<br>obsolete 废弃/depreciate 废旧,<br>collect 收集/aggregate 聚集<br></code></pre></td></tr></table></figure></blockquote><h2 id="项目目录推荐"><a href="#项目目录推荐" class="headerlink" title="项目目录推荐"></a>项目目录推荐</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs text">src // 源码目录<br>├─ api // 接口，统一管理<br>├─ assets // 静态资源<br>│  ├─ icons // svg 图标<br>│  ├─ fonts // 字体<br>│  ├─ markdowns // markdown<br>│  └─ images // 图片<br>├─ styles // 样式文件<br>├─ components // 组件<br>├─ composables // 组合式函数<br>├─ enums // 枚举<br>├─ layouts // 布局<br>├─ router // 路由管理<br>├─ store // 状态管理<br>├─ utils // 工具函数<br>├─ views // 页面<br>├─ App.vue // 根组件<br>└─ main.ts // 入口文件<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cn.vuejs.org/style-guide/">Vue 风格指南</a></li><li><a href="https://juejin.cn/post/6844903652096770055">掘金：史上最全的 Vue 开发规范</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 规范化提交</title>
    <link href="/post/4469821c/"/>
    <url>/post/4469821c/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要规范化提交？"><a href="#为什么要规范化提交？" class="headerlink" title="为什么要规范化提交？"></a>为什么要规范化提交？</h2><p>在多人协作的项目中，我们无法保证每个人对提交信息的准确描述，这可能会造成理解上的困难。而统一的风格和精确的描述，可以方便后期的维护工作，在处理 Bug 的时候也一目了然。如有必要，对于规范的提交信息，也便于使用自动化工具生成开发日志。</p><p>总而言之就是方便自己、方便别人、方便机器人。</p><h2 id="提交信息结构"><a href="#提交信息结构" class="headerlink" title="提交信息结构"></a>提交信息结构</h2><p>提交信息分成：头部、正文、注脚三个部分</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;类型&gt;[(可选的作用域)]: &lt;主题&gt;<br><br>[可选的正文]<br><br>[可选的注脚]<br></code></pre></td></tr></table></figure><p>提交信息中必须包含类型，一般为下面中的一种</p><table><thead><tr><th>type</th><th>description</th></tr></thead><tbody><tr><td>feat</td><td>新增一个功能</td></tr><tr><td>fix</td><td>修复一个 Bug</td></tr><tr><td>docs</td><td>变更文档</td></tr><tr><td>style</td><td>调整代码格式（不影响功能，例如：修改空格、分号、引号格式）</td></tr><tr><td>refactor</td><td>重构代码</td></tr><tr><td>perf</td><td>改善性能</td></tr><tr><td>test</td><td>测试</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如：webpack、gulp、npm）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和<code>package.json</code>中的<code>scripts</code>命令</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><p>作用域用来指定本次提交的影响范围，例如可以依据项目的菜单、功能模块或组件划分。</p><p>主题就是对提交的简洁描述，必须要有，一般在 50 个字符以内，通常遵循以下规范：</p><ul><li>动词开头，第一人称现在时</li><li>结尾不需要句号（.）</li><li>英文首字母应小写</li></ul><p>正文就是对本次提交的详细描述，可以有多行，应该说明修改的原因和更改前后的行为对比。</p><p>如果本次提交是突破性变更或关闭缺陷，则需要注脚：</p><ul><li><p>突破性变更</p><p>当前代码与上一版本相比具有突破性，则注脚以 <code>BREAKING CHANGE:</code> 开头，后面是对变更的描述和变更理由。</p></li><li><p>关闭缺陷</p><p>如果本次提交针对特定的 issue，那么可以在注脚中填写需要关闭的的一个或多个 issue。</p></li></ul><h2 id="破坏性提交"><a href="#破坏性提交" class="headerlink" title="破坏性提交"></a>破坏性提交</h2><p>在作用域后使用字符<code>!</code>提醒本次提交引入了破坏性的变更。<br>也可以选择在提交信息的正文或注脚中使用 <code>BREAKING CHANGE:</code>，描述具体内容。</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol><li>提交必须包含类型字段前缀，后接可选作用域，必要的冒号和空格，均采用英文半角。</li><li>作用域使用小括号包裹，英文半角。</li><li>正文必须在主题结束后空一行开始。</li><li>正文结束后空一行可以编写一行或多行注脚。</li><li>可以在类型/作用域后，<code>:</code>前使用<code>!</code>进一步提醒破坏性变更，当有<code>!</code>时，正文或注脚中必须包含<code>BREAKING CHANGE:</code></li></ol><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>示例 1</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">fix(compile): couple of unit tests for IE9<br><br>Older IEs serialize html uppercased, but IE9 does not...<br>Would be better to expect case insensitive, unfortunately jasmine does<br>not allow to user regexps for throw expectations.<br><br>Closes #392<br>Breaks foo.bar api, foo.baz should be used instead<br></code></pre></td></tr></table></figure><p>示例 2</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">chore(release): v3.4.2<br></code></pre></td></tr></table></figure><p>示例 3</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">feat(browser): onUrlChange event (popstate/hashchange/polling)<br><br>Added new event to browser:<br>- forward popstate event if available<br>- forward hashchange event if popstate not available<br>- do polling when neither popstate nor hashchange available<br><br>Breaks $browser.onHashChange, which was removed (use onUrlChange instead)<br></code></pre></td></tr></table></figure><p>示例 4</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">chore!: drop Node 6 from testing matrix<br><br>BREAKING CHANGE: dropping Node 6 which hits end of life in April<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4/">约定式提交 1.0.0-beta.4</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动手实现一个水波纹的按钮</title>
    <link href="/post/58232cf9/"/>
    <url>/post/58232cf9/</url>
    
    <content type="html"><![CDATA[<p>本文将会介绍如何实现一个具有水波纹点击效果的按钮</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>实现原理十分简单，在按钮点击时，在点击位置生成一个半透明圆形，圆形逐渐变大变淡，以此来达到水波纹的效果。</p><h2 id="样式和结构"><a href="#样式和结构" class="headerlink" title="样式和结构"></a>样式和结构</h2><p>在 <code>button</code> 里添加 <code>span</code> 标签代表波纹。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button-witch-ripple&quot;</span>&gt;</span>button witch ripple<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>span</code> 使用相对 <code>button</code> 的绝对定位。<br>在开始时将其缩放为 <code>0</code>，然后为其添加一个变成完整大小的动画。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.button-witch-ripple</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  ...;<br>&#125;<br><span class="hljs-comment">/* 波纹 */</span><br><span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.ripple</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.7</span>);<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">animation</span>: buttonRipple <span class="hljs-number">0.6s</span> linear;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> buttonRipple &#123;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="点击事件逻辑"><a href="#点击事件逻辑" class="headerlink" title="点击事件逻辑"></a>点击事件逻辑</h2><p>在点击按钮时，显然需要获取相对 <code>button</code> 的点击位置。通过点击事件的参数的 <code>offsetX</code> 和 <code>offsetY</code> 减去波纹的半径即可获得波纹元素 <code>span</code> 距离父元素 <code>button</code> 正确的 <code>left</code> 和 <code>top</code>。若对此不理解可以参考下面的图片：<br><img src="https://cdn.jsdelivr.net/gh/chapubest/picBed/images/20210426103932.png" alt="水波纹点击示意图"><br>波纹的宽度取多少合适呢？<br>波纹需要在最大时完成覆盖 <code>button</code>，所以波纹的半径应该大于 <code>button</code> 的对角线距离。为了方便直接使用 <code>button</code> 的长宽之和作为波纹半径，宽度即半径的 2 倍。<br>点击事件，生成了新的一个 <code>span</code>，所以如果原本已存在 <code>span</code>，应将其删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.button-witch-ripple&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">const</span> button = $(<span class="hljs-variable language_">this</span>);<br>  <span class="hljs-keyword">var</span> width = button.<span class="hljs-title function_">outerHeight</span>() + button.<span class="hljs-title function_">outerWidth</span>();<br>  <span class="hljs-keyword">var</span> ripple = $(<span class="hljs-string">&quot;&lt;span&gt;&lt;/span&gt;&quot;</span>);<br>  ripple.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;ripple&quot;</span>);<br>  ripple.<span class="hljs-title function_">css</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;width * <span class="hljs-number">2</span>&#125;</span>px`</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;width * <span class="hljs-number">2</span>&#125;</span>px`</span>,<br>    <span class="hljs-attr">left</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;e.offsetX - width&#125;</span>px`</span>,<br>    <span class="hljs-attr">top</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;e.offsetY - width&#125;</span>px`</span>,<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (button.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;.ripple&quot;</span>).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    button.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;.ripple&quot;</span>).<span class="hljs-title function_">remove</span>();<br>  &#125;<br>  button.<span class="hljs-title function_">append</span>(ripple);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://gitee.com/chapu/just-demo">完整代码和预览</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现一个简单骨架屏</title>
    <link href="/post/29e5d662/"/>
    <url>/post/29e5d662/</url>
    
    <content type="html"><![CDATA[<h2 id="教程内容"><a href="#教程内容" class="headerlink" title="教程内容"></a>教程内容</h2><p>先写一个卡片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./demo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;demo&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>骨架屏 Skeleton 效果<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span><br>      一般来讲，我们都必须务必慎重的考虑考虑。 既然如此，<br>      在这种困难的抉择下，本人思来想去，寝食难安。<br>      郭沫若说过一句富有哲理的话，形成天才的决定因素应该是勤奋。这句话语虽然很短，但令我浮想联翩。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>卡片样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">font-family</span>: Arial, Helvetica, sans-serif;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f6f6f6</span>;<br>&#125;<br><span class="hljs-selector-class">.card</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">320px</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.12</span>);<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-class">.img</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.img</span> &gt; <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: inherit;<br>  <span class="hljs-comment">/* 图片可裁切，但保持原有尺寸比例 */</span><br>  <span class="hljs-attribute">object-fit</span>: cover;<br>&#125;<br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span> <span class="hljs-number">1.8rem</span>;<br>&#125;<br><span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5rem</span>;<br>&#125;<br><span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着就来实现卡片的骨架，复制 html，去掉内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card loading&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为骨架添加颜色和默认高度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 定义全局变量 */</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--loading-grey</span>: <span class="hljs-number">#ededed</span>;<br>&#125;<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-class">.img</span>,<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--loading-grey);<br>&#125;<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">1.6rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">4rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来是重点添加高亮：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-class">.img</span>,<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-comment">/* 添加一个倾角为100度的线性渐变 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>      <span class="hljs-number">100deg</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>) <span class="hljs-number">40%</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>) <span class="hljs-number">50%</span>,<br>      <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>) <span class="hljs-number">60%</span><br>    ) <span class="hljs-built_in">var</span>(--loading-grey);<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">200%</span> <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-position</span>-x: <span class="hljs-number">180%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为高亮添加动画：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-class">.img</span>,<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-tag">h4</span>,<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-comment">/* 动画无限循环 */</span><br>  <span class="hljs-attribute">animation</span>: <span class="hljs-number">1s</span> loading ease-in-out infinite;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> loading &#123;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">background-position</span>-x: -<span class="hljs-number">20%</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 动画延迟播放保证同步 */</span><br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-tag">h4</span> &#123;<br>  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.05s</span>;<br>&#125;<br><span class="hljs-selector-class">.loading</span> <span class="hljs-selector-class">.desc</span> &#123;<br>  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.06s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>到此就搞定啦~</p><h2 id="参考资料-amp-相关链接"><a href="#参考资料-amp-相关链接" class="headerlink" title="参考资料&amp;相关链接"></a>参考资料&amp;相关链接</h2><ul><li><a href="https://juejin.cn/post/6915763034069663752">掘金：骨架屏 Skeleton 效果</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>节流与防抖动</title>
    <link href="/post/b8b34af/"/>
    <url>/post/b8b34af/</url>
    
    <content type="html"><![CDATA[<p>隔段时间就会忘…</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>节流和防抖动都是前端性能优化的常用技术，效果不同所以适用场景略有不同。<br>先说防抖动吧，debounce。防抖动的目的是为了使短时间内频繁触发的的同一事件只执行最后一次。举个例子，你陪女朋友逛街，你的女朋友在挑口红选色号，她试了非常多的色号，全部都买下来显然不现实，所以你决定只买她最后试的那一支。<del>解决犹豫不决，一个防抖动就够了</del>。同样，你接到一个任务需要在用户输入时，显示一个下拉列表展示输入建议，并且根据用户输入内容显示不同的输入建议。用户的输入操作就和你的女朋友一样反复无常，所以这里就可以使用防抖动。<br>再来聊聊节流，throttle。节流，顾名思义就像在河道上建了一个水坝，控制水的流速。节流的目的就是为了使短时间内频繁触发的的同一事件间隔一段时间的执行一次。这有点像游戏里的技能 cd，你释放完技能后必须等待一段时间才可以继续释放。<br>如果还不明白，可以看下面这张图，或者去<a href="http://demo.nimius.net/debounce_throttle/">该网站</a>实际感受下。<br><img src="https://cdn.jsdelivr.net/gh/chapubest/picBed/images/20210106095753.png" alt="节流与防抖动效果对比示意图"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>下面展示的仅仅是其中一种实现方法，其中涉及到<strong>闭包</strong>和<strong>apply</strong>的概念和知识，都是 js 中比较重要的内容，对这方面还不懂的请自行学习。</p><h3 id="防抖动"><a href="#防抖动" class="headerlink" title="防抖动"></a>防抖动</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>  <span class="hljs-keyword">let</span> timer;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>,<br>      args = <span class="hljs-variable language_">arguments</span>;<br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timer);<br>    &#125;<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      fn.<span class="hljs-title function_">apply</span>(that, args);<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>  <span class="hljs-keyword">let</span> wait = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>,<br>      args = <span class="hljs-variable language_">arguments</span>;<br>    <span class="hljs-keyword">if</span> (!wait) &#123;<br>      wait = <span class="hljs-literal">true</span>;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        fn.<span class="hljs-title function_">apply</span>(that, args);<br>        wait = <span class="hljs-literal">false</span>;<br>      &#125;, delay);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><p>一般遇到<strong>高频率事件</strong>就需要注意了，是否会对浏览器性能照成影响，是否需要使用节流和防抖动？<br>根据它们各自的使用效果，针对业务场景可以自由的选择使用。使用节流的地方并非不可以使用防抖动，反之亦然，只是在有些场景下，其中一种更加合适。</p><h2 id="参考资料-amp-相关链接"><a href="#参考资料-amp-相关链接" class="headerlink" title="参考资料&amp;相关链接"></a>参考资料&amp;相关链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/38313717">知乎：函数防抖与函数节流</a></li><li><a href="https://segmentfault.com/a/1190000018428170">segmentfault：浅谈 js 防抖和节流 from</a></li><li><a href="http://demo.nimius.net/debounce_throttle/">体验节流与防抖动的区别</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收不到邮件的排查方法</title>
    <link href="/post/19dfc0c3/"/>
    <url>/post/19dfc0c3/</url>
    
    <content type="html"><![CDATA[<p><strong>又收不到邮件</strong> ╰（‵□′）╯</p><p>一般通过邮箱注册网站，接收验证码时，偶尔会遇到一直收不到邮件的情况。下面简单总结下我的排查方法。</p><p>如果还是无法解决，请联系邮箱服务提供商客服，寻求帮助。</p><h2 id="向自己发送测试邮件"><a href="#向自己发送测试邮件" class="headerlink" title="向自己发送测试邮件"></a>向自己发送测试邮件</h2><p>用别的邮箱给自己发一封测试邮件，试试不要钱~</p><h2 id="检查邮件地址是否填写正确"><a href="#检查邮件地址是否填写正确" class="headerlink" title="检查邮件地址是否填写正确"></a>检查邮件地址是否填写正确</h2><p>额，如果真是这个问题，就尴尬了，所以先排除掉这个问题，免得浪费时间。<br>如果你正在使用纯数字邮箱，强烈建议设置一个英文邮箱地址，免费又方便，还可以尽量避免遗漏错误。</p><h2 id="检查垃圾箱邮件"><a href="#检查垃圾箱邮件" class="headerlink" title="检查垃圾箱邮件"></a>检查垃圾箱邮件</h2><p>这种情况个人感觉是最常见的，所以检查一下垃圾箱吧。</p><h2 id="检查邮件是否被系统拦截"><a href="#检查邮件是否被系统拦截" class="headerlink" title="检查邮件是否被系统拦截"></a>检查邮件是否被系统拦截</h2><p>有些情况，邮箱会自动拦截一些广告子类的邮件，或者你之前把某个联系人拉到了黑名单里，你的邮件可能就被自动拦截了。<br>这里以 QQ 邮箱为例，你可以在页面底部的自助查询中找到收信查询，看看最近是不是有邮件被拦截了。<br><img src="https://i.loli.net/2020/11/19/xWT3a7nksNCvfql.png" alt="自助查询"><br><img src="https://i.loli.net/2020/11/19/rcaQb6YxReDg7iw.png" alt="收信查询"></p><h2 id="检查数字账户是否被关闭"><a href="#检查数字账户是否被关闭" class="headerlink" title="检查数字账户是否被关闭"></a>检查数字账户是否被关闭</h2><p>今天遇到一个邮件死活收不到的情况，到设置里一看原理是数字账户被关闭。<br>如果你同时开启数字邮箱和英文邮箱，而英文邮箱可以收到邮件，数字邮箱收不到邮件可以检查一下。<br>还是以 QQ 邮箱为例，你可以在设置&gt;账户中找到它。<br><img src="https://i.loli.net/2020/11/19/NyVKr31QS9YTqIo.png" alt="设置"><br><img src="https://i.loli.net/2020/11/19/LniBsQVa9dlIMSp.png" alt="数字账户"></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
